#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
#include<string.h>

struct stack{
    int top;
    int size;
    int *arr;
};

int isEmpty(struct stack*s){
    if(s->top==-1){
        
        return 1;
    }
    else{
        return 0;
    }
}
int isFull(struct stack*s){
    if(s->top==s->size-1){
        printf("stack full");
        return 1;
    }
    else{
        return 0;
    }
}

void push(struct stack *s,int value){
    if(isFull(s)){
        printf("Stack full cannot push.");
    }
    else{
        s->arr[++s->top]=value;
        printf("\n%d pushed.",value);
    }
}

void display(struct stack *s){
    for(int i=0;i<=s->top;i++){
        printf("\nStack:");
        printf("%d",s->arr[i]);
    }
}

int pop(struct stack *s){
    if(isEmpty(s)){
        printf("stack empty cannot pop.");
        return -1;
    }
    else{
        return s->arr[s->top--];
        
    }
}

void peek(struct  stack *s){
    int peek=s->arr[s->top];
    printf("top=%d",peek);
}

int isOperator(char ch){
    return ch=='+'||ch=='-'||ch=='/'||ch=='*';
}
int calculate(int num1,int num2,char ch){
    
    switch(ch){
        case '+':
         return num1+num2;
         
         case '-':
         return num1-num2;
         
         case '*':
         return num1*num2;
         
         case '/':
         return num1/num2;
    }
}


void evaluatePostfix(struct stack *s,char *postfix){
    int len=strlen(postfix);
    
    for(int i=len - 1;i>=0;i--){
        
        if( !isOperator(postfix[i])){                    //is a number -> push
        int num=postfix[i]-'0';
          push(s,num);
        }
        
        else if(!isEmpty(s) && isOperator(postfix[i])){
            int num1=pop(s);
            int num2=pop(s);
            int ans=calculate(num1,num2,postfix[i]);
            push(s,ans);
            
        }
    }
    
    printf("Answer : %d ",pop(s));
    
    
}




int main(){
    struct stack *s=(struct stack* )malloc(sizeof(struct stack));
    s->top=-1;
    s->size=100;
    s->arr=(int*)malloc(s->size* sizeof(int));
    
    char postfix[10];
    printf("Enter expression : ");
    scanf("%s",postfix);
    
    evaluatePostfix(s,postfix);
    free(s->arr); 
    free(s);
    
    
    
    
}
